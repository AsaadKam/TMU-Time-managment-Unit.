
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000085c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800060  00800060  000008d0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000920  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e5d  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087e  00000000  00000000  000018b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027c1  00000000  00000000  00002133  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  000048f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c5  00000000  00000000  00004b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001908  00000000  00000000  00005235  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00006b3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 05 04 	jmp	0x80a	; 0x80a <__vector_5>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 b2 03 	jmp	0x764	; 0x764 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 37       	cpi	r26, 0x71	; 113
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 48 00 	call	0x90	; 0x90 <main>
  74:	0c 94 2c 04 	jmp	0x858	; 0x858 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <function>:

/*- LOCAL FUNCTIONS IMPLEMENTATION ------------------------*/

void function(void)
{
    sgu16_Count_main++;
  7c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  80:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  8a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
  8e:	08 95       	ret

00000090 <main>:

int main()
{
  90:	00 d0       	rcall	.+0      	; 0x92 <main+0x2>
  92:	00 d0       	rcall	.+0      	; 0x94 <main+0x4>
  94:	cd b7       	in	r28, 0x3d	; 61
  96:	de b7       	in	r29, 0x3e	; 62
	DIO_INIT_Pin(0,OUTPUT);
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 79 00 	call	0xf2	; 0xf2 <DIO_INIT_Pin>
    DIO_Write_Pin(0,HIGH);
  a0:	61 e0       	ldi	r22, 0x01	; 1
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 09 01 	call	0x212	; 0x212 <DIO_Write_Pin>
	
    StrTimerConfiguration_t  s_TIMER_Init_Config;
	
	s_TIMER_Init_Config.Timer_Channel=TIMER0;
  a8:	19 82       	std	Y+1, r1	; 0x01
	s_TIMER_Init_Config.Timer_Psc=F_CPU_CLOCK_8_TIMER_0;
  aa:	82 e0       	ldi	r24, 0x02	; 2
  ac:	8a 83       	std	Y+2, r24	; 0x02
	s_TIMER_Init_Config.Timer_Mode=TIMER_MODE_MILIE;
  ae:	8b 83       	std	Y+3, r24	; 0x03
	s_TIMER_Init_Config.Interrupt_Mode=INTERRUPT;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	8c 83       	std	Y+4, r24	; 0x04
	
    Timer_Init(&s_TIMER_Init_Config);
  b4:	ce 01       	movw	r24, r28
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <Timer_Init>
	
    Timer_Start(TIMER0,0,function);
  bc:	4e e3       	ldi	r20, 0x3E	; 62
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	70 e0       	ldi	r23, 0x00	; 0
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 31 02 	call	0x462	; 0x462 <Timer_Start>
  ca:	0b c0       	rjmp	.+22     	; 0xe2 <main+0x52>
	while(1)
	{

    	if(sgu16_Count_main>=1000U) 	 		
		{
	        DIO_toggle_Pin(0);
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 99 01 	call	0x332	; 0x332 <DIO_toggle_Pin>
			count=0;
  d2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <count+0x1>
  d6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <count>
			sgu16_Count_main=0;
  da:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  de:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
    	if(sgu16_Count_main>=1000U) 	 		
  e2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  ea:	88 3e       	cpi	r24, 0xE8	; 232
  ec:	93 40       	sbci	r25, 0x03	; 3
  ee:	c8 f3       	brcs	.-14     	; 0xe2 <main+0x52>
  f0:	ed cf       	rjmp	.-38     	; 0xcc <main+0x3c>

000000f2 <DIO_INIT_Pin>:
}
uint8_t DIO_INIT_Pin(uint8_t pin, uint8_t direction)
{
	uint8_t por;

	if(pin>=PinsNeeded || pin>=No_of_pins ) return 0;
  f2:	80 32       	cpi	r24, 0x20	; 32
  f4:	08 f0       	brcs	.+2      	; 0xf8 <DIO_INIT_Pin+0x6>
  f6:	8b c0       	rjmp	.+278    	; 0x20e <DIO_INIT_Pin+0x11c>
    else
	{
	por='A'+pin/PortSize;
  f8:	28 2f       	mov	r18, r24
  fa:	26 95       	lsr	r18
  fc:	26 95       	lsr	r18
  fe:	26 95       	lsr	r18
 100:	91 e4       	ldi	r25, 0x41	; 65
 102:	92 0f       	add	r25, r18
	pin=pin%PortSize;
 104:	87 70       	andi	r24, 0x07	; 7
	}
	
    switch(por)
 106:	22 30       	cpi	r18, 0x02	; 2
 108:	09 f4       	brne	.+2      	; 0x10c <DIO_INIT_Pin+0x1a>
 10a:	45 c0       	rjmp	.+138    	; 0x196 <DIO_INIT_Pin+0xa4>
 10c:	94 34       	cpi	r25, 0x44	; 68
 10e:	08 f0       	brcs	.+2      	; 0x112 <DIO_INIT_Pin+0x20>
 110:	60 c0       	rjmp	.+192    	; 0x1d2 <DIO_INIT_Pin+0xe0>
 112:	91 34       	cpi	r25, 0x41	; 65
 114:	a9 f0       	breq	.+42     	; 0x140 <DIO_INIT_Pin+0x4e>
 116:	92 34       	cpi	r25, 0x42	; 66
 118:	89 f4       	brne	.+34     	; 0x13c <DIO_INIT_Pin+0x4a>
    {
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
              break;

    case 'B': if(direction==0){CLR_BIT(DirectionRegisterB,pin);}else{SET_BIT(DirectionRegisterB,pin);}
 11a:	61 11       	cpse	r22, r1
 11c:	2f c0       	rjmp	.+94     	; 0x17c <DIO_INIT_Pin+0x8a>
 11e:	47 b3       	in	r20, 0x17	; 23
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_INIT_Pin+0x3a>
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	8a 95       	dec	r24
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_INIT_Pin+0x36>
 130:	cf 01       	movw	r24, r30
 132:	80 95       	com	r24
 134:	84 23       	and	r24, r20
 136:	87 bb       	out	0x17, r24	; 23
#endif
	default :
	return ERROR_NOK;
	break;
	}
return ERROR_OK;
 138:	86 2f       	mov	r24, r22
 13a:	08 95       	ret
    switch(por)
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	08 95       	ret
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
 140:	61 11       	cpse	r22, r1
 142:	0f c0       	rjmp	.+30     	; 0x162 <DIO_INIT_Pin+0x70>
 144:	4a b3       	in	r20, 0x1a	; 26
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	f9 01       	movw	r30, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_INIT_Pin+0x60>
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	8a 95       	dec	r24
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_INIT_Pin+0x5c>
 156:	cf 01       	movw	r24, r30
 158:	80 95       	com	r24
 15a:	84 23       	and	r24, r20
 15c:	8a bb       	out	0x1a, r24	; 26
return ERROR_OK;
 15e:	86 2f       	mov	r24, r22
 160:	08 95       	ret
    case 'A': if(direction==0){CLR_BIT(DirectionRegisterA,pin);}else{SET_BIT(DirectionRegisterA,pin);}
 162:	9a b3       	in	r25, 0x1a	; 26
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_INIT_Pin+0x7c>
 16a:	22 0f       	add	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	8a 95       	dec	r24
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_INIT_Pin+0x78>
 172:	89 2f       	mov	r24, r25
 174:	82 2b       	or	r24, r18
 176:	8a bb       	out	0x1a, r24	; 26
return ERROR_OK;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	08 95       	ret
    case 'B': if(direction==0){CLR_BIT(DirectionRegisterB,pin);}else{SET_BIT(DirectionRegisterB,pin);}
 17c:	97 b3       	in	r25, 0x17	; 23
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_INIT_Pin+0x96>
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	8a 95       	dec	r24
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_INIT_Pin+0x92>
 18c:	89 2f       	mov	r24, r25
 18e:	82 2b       	or	r24, r18
 190:	87 bb       	out	0x17, r24	; 23
return ERROR_OK;
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	08 95       	ret
    case 'C': if(direction==0){CLR_BIT(DirectionRegisterC,pin);}else{SET_BIT(DirectionRegisterC,pin);}
 196:	61 11       	cpse	r22, r1
 198:	0f c0       	rjmp	.+30     	; 0x1b8 <DIO_INIT_Pin+0xc6>
 19a:	44 b3       	in	r20, 0x14	; 20
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	f9 01       	movw	r30, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_INIT_Pin+0xb6>
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	8a 95       	dec	r24
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_INIT_Pin+0xb2>
 1ac:	cf 01       	movw	r24, r30
 1ae:	80 95       	com	r24
 1b0:	84 23       	and	r24, r20
 1b2:	84 bb       	out	0x14, r24	; 20
return ERROR_OK;
 1b4:	86 2f       	mov	r24, r22
 1b6:	08 95       	ret
    case 'C': if(direction==0){CLR_BIT(DirectionRegisterC,pin);}else{SET_BIT(DirectionRegisterC,pin);}
 1b8:	94 b3       	in	r25, 0x14	; 20
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_INIT_Pin+0xd2>
 1c0:	22 0f       	add	r18, r18
 1c2:	33 1f       	adc	r19, r19
 1c4:	8a 95       	dec	r24
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_INIT_Pin+0xce>
 1c8:	89 2f       	mov	r24, r25
 1ca:	82 2b       	or	r24, r18
 1cc:	84 bb       	out	0x14, r24	; 20
return ERROR_OK;
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	08 95       	ret
    case 'D': if(direction==0){CLR_BIT(DirectionRegisterD,pin);}else{SET_BIT(DirectionRegisterD,pin);}
 1d2:	61 11       	cpse	r22, r1
 1d4:	0f c0       	rjmp	.+30     	; 0x1f4 <DIO_INIT_Pin+0x102>
 1d6:	41 b3       	in	r20, 0x11	; 17
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	b9 01       	movw	r22, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_INIT_Pin+0xf2>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	8a 95       	dec	r24
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_INIT_Pin+0xee>
 1e8:	cb 01       	movw	r24, r22
 1ea:	80 95       	com	r24
 1ec:	84 23       	and	r24, r20
 1ee:	81 bb       	out	0x11, r24	; 17
	return ERROR_NOK;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	08 95       	ret
    case 'D': if(direction==0){CLR_BIT(DirectionRegisterD,pin);}else{SET_BIT(DirectionRegisterD,pin);}
 1f4:	91 b3       	in	r25, 0x11	; 17
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_INIT_Pin+0x10e>
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	8a 95       	dec	r24
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_INIT_Pin+0x10a>
 204:	89 2f       	mov	r24, r25
 206:	82 2b       	or	r24, r18
 208:	81 bb       	out	0x11, r24	; 17
	return ERROR_NOK;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	08 95       	ret
	if(pin>=PinsNeeded || pin>=No_of_pins ) return 0;
 20e:	80 e0       	ldi	r24, 0x00	; 0
}
 210:	08 95       	ret

00000212 <DIO_Write_Pin>:
return ERROR_OK;
}
uint8_t DIO_Write_Pin(uint8_t pin,uint8_t BitValue)
{
	uint8_t por;
 	if(pin>=PinsNeeded || pin>=No_of_pins ) return ERROR_NOK;
 212:	80 32       	cpi	r24, 0x20	; 32
 214:	08 f0       	brcs	.+2      	; 0x218 <DIO_Write_Pin+0x6>
 216:	8b c0       	rjmp	.+278    	; 0x32e <DIO_Write_Pin+0x11c>
 	else
 	{
	 	por='A'+pin/PortSize;
 218:	28 2f       	mov	r18, r24
 21a:	26 95       	lsr	r18
 21c:	26 95       	lsr	r18
 21e:	26 95       	lsr	r18
 220:	91 e4       	ldi	r25, 0x41	; 65
 222:	92 0f       	add	r25, r18
	 	pin=pin%PortSize;
 224:	87 70       	andi	r24, 0x07	; 7
 	}
	 
    switch(por)
 226:	22 30       	cpi	r18, 0x02	; 2
 228:	09 f4       	brne	.+2      	; 0x22c <DIO_Write_Pin+0x1a>
 22a:	45 c0       	rjmp	.+138    	; 0x2b6 <DIO_Write_Pin+0xa4>
 22c:	94 34       	cpi	r25, 0x44	; 68
 22e:	08 f0       	brcs	.+2      	; 0x232 <DIO_Write_Pin+0x20>
 230:	60 c0       	rjmp	.+192    	; 0x2f2 <DIO_Write_Pin+0xe0>
 232:	91 34       	cpi	r25, 0x41	; 65
 234:	a9 f0       	breq	.+42     	; 0x260 <DIO_Write_Pin+0x4e>
 236:	92 34       	cpi	r25, 0x42	; 66
 238:	89 f4       	brne	.+34     	; 0x25c <DIO_Write_Pin+0x4a>
    {
   case 'A': if(BitValue==0){CLR_BIT(WriteRegisterA,pin);}else{SET_BIT(WriteRegisterA,pin);}
              break;

    case 'B': if(BitValue==0){CLR_BIT(WriteRegisterB,pin);}else{SET_BIT(WriteRegisterB,pin);}
 23a:	61 11       	cpse	r22, r1
 23c:	2f c0       	rjmp	.+94     	; 0x29c <DIO_Write_Pin+0x8a>
 23e:	48 b3       	in	r20, 0x18	; 24
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_Write_Pin+0x3a>
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	8a 95       	dec	r24
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_Write_Pin+0x36>
 250:	cf 01       	movw	r24, r30
 252:	80 95       	com	r24
 254:	84 23       	and	r24, r20
 256:	88 bb       	out	0x18, r24	; 24
	#endif
	default :
	return ERROR_NOK;
	break;
	}
	return ERROR_OK;
 258:	86 2f       	mov	r24, r22
 25a:	08 95       	ret
    switch(por)
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	08 95       	ret
   case 'A': if(BitValue==0){CLR_BIT(WriteRegisterA,pin);}else{SET_BIT(WriteRegisterA,pin);}
 260:	61 11       	cpse	r22, r1
 262:	0f c0       	rjmp	.+30     	; 0x282 <DIO_Write_Pin+0x70>
 264:	4b b3       	in	r20, 0x1b	; 27
 266:	21 e0       	ldi	r18, 0x01	; 1
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	f9 01       	movw	r30, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <DIO_Write_Pin+0x60>
 26e:	ee 0f       	add	r30, r30
 270:	ff 1f       	adc	r31, r31
 272:	8a 95       	dec	r24
 274:	e2 f7       	brpl	.-8      	; 0x26e <DIO_Write_Pin+0x5c>
 276:	cf 01       	movw	r24, r30
 278:	80 95       	com	r24
 27a:	84 23       	and	r24, r20
 27c:	8b bb       	out	0x1b, r24	; 27
	return ERROR_OK;
 27e:	86 2f       	mov	r24, r22
 280:	08 95       	ret
   case 'A': if(BitValue==0){CLR_BIT(WriteRegisterA,pin);}else{SET_BIT(WriteRegisterA,pin);}
 282:	9b b3       	in	r25, 0x1b	; 27
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_Write_Pin+0x7c>
 28a:	22 0f       	add	r18, r18
 28c:	33 1f       	adc	r19, r19
 28e:	8a 95       	dec	r24
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_Write_Pin+0x78>
 292:	89 2f       	mov	r24, r25
 294:	82 2b       	or	r24, r18
 296:	8b bb       	out	0x1b, r24	; 27
	return ERROR_OK;
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	08 95       	ret
    case 'B': if(BitValue==0){CLR_BIT(WriteRegisterB,pin);}else{SET_BIT(WriteRegisterB,pin);}
 29c:	98 b3       	in	r25, 0x18	; 24
 29e:	21 e0       	ldi	r18, 0x01	; 1
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_Write_Pin+0x96>
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	8a 95       	dec	r24
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_Write_Pin+0x92>
 2ac:	89 2f       	mov	r24, r25
 2ae:	82 2b       	or	r24, r18
 2b0:	88 bb       	out	0x18, r24	; 24
	return ERROR_OK;
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret
    case 'C': if(BitValue==0){CLR_BIT(WriteRegisterC,pin);}else{SET_BIT(WriteRegisterC,pin);}
 2b6:	61 11       	cpse	r22, r1
 2b8:	0f c0       	rjmp	.+30     	; 0x2d8 <DIO_Write_Pin+0xc6>
 2ba:	45 b3       	in	r20, 0x15	; 21
 2bc:	21 e0       	ldi	r18, 0x01	; 1
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	f9 01       	movw	r30, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_Write_Pin+0xb6>
 2c4:	ee 0f       	add	r30, r30
 2c6:	ff 1f       	adc	r31, r31
 2c8:	8a 95       	dec	r24
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_Write_Pin+0xb2>
 2cc:	cf 01       	movw	r24, r30
 2ce:	80 95       	com	r24
 2d0:	84 23       	and	r24, r20
 2d2:	85 bb       	out	0x15, r24	; 21
	return ERROR_OK;
 2d4:	86 2f       	mov	r24, r22
 2d6:	08 95       	ret
    case 'C': if(BitValue==0){CLR_BIT(WriteRegisterC,pin);}else{SET_BIT(WriteRegisterC,pin);}
 2d8:	95 b3       	in	r25, 0x15	; 21
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_Write_Pin+0xd2>
 2e0:	22 0f       	add	r18, r18
 2e2:	33 1f       	adc	r19, r19
 2e4:	8a 95       	dec	r24
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_Write_Pin+0xce>
 2e8:	89 2f       	mov	r24, r25
 2ea:	82 2b       	or	r24, r18
 2ec:	85 bb       	out	0x15, r24	; 21
	return ERROR_OK;
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	08 95       	ret
    case 'D': if(BitValue==0){CLR_BIT(WriteRegisterD,pin);}else{SET_BIT(WriteRegisterD,pin);}
 2f2:	61 11       	cpse	r22, r1
 2f4:	0f c0       	rjmp	.+30     	; 0x314 <DIO_Write_Pin+0x102>
 2f6:	42 b3       	in	r20, 0x12	; 18
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	f9 01       	movw	r30, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_Write_Pin+0xf2>
 300:	ee 0f       	add	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	8a 95       	dec	r24
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_Write_Pin+0xee>
 308:	cf 01       	movw	r24, r30
 30a:	80 95       	com	r24
 30c:	84 23       	and	r24, r20
 30e:	82 bb       	out	0x12, r24	; 18
	return ERROR_OK;
 310:	86 2f       	mov	r24, r22
 312:	08 95       	ret
    case 'D': if(BitValue==0){CLR_BIT(WriteRegisterD,pin);}else{SET_BIT(WriteRegisterD,pin);}
 314:	92 b3       	in	r25, 0x12	; 18
 316:	21 e0       	ldi	r18, 0x01	; 1
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_Write_Pin+0x10e>
 31c:	22 0f       	add	r18, r18
 31e:	33 1f       	adc	r19, r19
 320:	8a 95       	dec	r24
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_Write_Pin+0x10a>
 324:	89 2f       	mov	r24, r25
 326:	82 2b       	or	r24, r18
 328:	82 bb       	out	0x12, r24	; 18
	return ERROR_OK;
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	08 95       	ret
 	if(pin>=PinsNeeded || pin>=No_of_pins ) return ERROR_NOK;
 32e:	81 e0       	ldi	r24, 0x01	; 1
}
 330:	08 95       	ret

00000332 <DIO_toggle_Pin>:
return ERROR_OK;
}
uint8_t DIO_toggle_Pin(uint8_t pin)
{
	uint8_t por;
	if(pin>=PinsNeeded || pin>=No_of_pins ) return ERROR_NOK;
 332:	80 32       	cpi	r24, 0x20	; 32
 334:	08 f0       	brcs	.+2      	; 0x338 <DIO_toggle_Pin+0x6>
 336:	45 c0       	rjmp	.+138    	; 0x3c2 <DIO_toggle_Pin+0x90>
	else
	{
		por='A'+pin/PortSize;
 338:	28 2f       	mov	r18, r24
 33a:	26 95       	lsr	r18
 33c:	26 95       	lsr	r18
 33e:	26 95       	lsr	r18
 340:	91 e4       	ldi	r25, 0x41	; 65
 342:	92 0f       	add	r25, r18
		pin=pin%PortSize;
 344:	87 70       	andi	r24, 0x07	; 7
	}
	
	switch(por)
 346:	22 30       	cpi	r18, 0x02	; 2
 348:	11 f1       	breq	.+68     	; 0x38e <DIO_toggle_Pin+0x5c>
 34a:	94 34       	cpi	r25, 0x44	; 68
 34c:	68 f5       	brcc	.+90     	; 0x3a8 <DIO_toggle_Pin+0x76>
 34e:	91 34       	cpi	r25, 0x41	; 65
 350:	89 f0       	breq	.+34     	; 0x374 <DIO_toggle_Pin+0x42>
 352:	92 34       	cpi	r25, 0x42	; 66
 354:	69 f4       	brne	.+26     	; 0x370 <DIO_toggle_Pin+0x3e>
	{
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
			 break;
		case 'B':TOGGLE_BIT(WriteRegisterB,pin);
 356:	98 b3       	in	r25, 0x18	; 24
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	02 c0       	rjmp	.+4      	; 0x362 <DIO_toggle_Pin+0x30>
 35e:	22 0f       	add	r18, r18
 360:	33 1f       	adc	r19, r19
 362:	8a 95       	dec	r24
 364:	e2 f7       	brpl	.-8      	; 0x35e <DIO_toggle_Pin+0x2c>
 366:	89 2f       	mov	r24, r25
 368:	82 27       	eor	r24, r18
 36a:	88 bb       	out	0x18, r24	; 24
		default :
		return ERROR_NOK;
		break;
		
	}
	return ERROR_OK;
 36c:	80 e0       	ldi	r24, 0x00	; 0
			 break;
 36e:	08 95       	ret
	switch(por)
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	08 95       	ret
		case 'A':TOGGLE_BIT(WriteRegisterA,pin);
 374:	9b b3       	in	r25, 0x1b	; 27
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_toggle_Pin+0x4e>
 37c:	22 0f       	add	r18, r18
 37e:	33 1f       	adc	r19, r19
 380:	8a 95       	dec	r24
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_toggle_Pin+0x4a>
 384:	89 2f       	mov	r24, r25
 386:	82 27       	eor	r24, r18
 388:	8b bb       	out	0x1b, r24	; 27
	return ERROR_OK;
 38a:	80 e0       	ldi	r24, 0x00	; 0
			 break;
 38c:	08 95       	ret
		case 'C':TOGGLE_BIT(WriteRegisterC,pin);
 38e:	95 b3       	in	r25, 0x15	; 21
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_toggle_Pin+0x68>
 396:	22 0f       	add	r18, r18
 398:	33 1f       	adc	r19, r19
 39a:	8a 95       	dec	r24
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_toggle_Pin+0x64>
 39e:	89 2f       	mov	r24, r25
 3a0:	82 27       	eor	r24, r18
 3a2:	85 bb       	out	0x15, r24	; 21
	return ERROR_OK;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
			 break;
 3a6:	08 95       	ret
		case 'D':TOGGLE_BIT(WriteRegisterD,pin);
 3a8:	92 b3       	in	r25, 0x12	; 18
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <DIO_toggle_Pin+0x82>
 3b0:	22 0f       	add	r18, r18
 3b2:	33 1f       	adc	r19, r19
 3b4:	8a 95       	dec	r24
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <DIO_toggle_Pin+0x7e>
 3b8:	89 2f       	mov	r24, r25
 3ba:	82 27       	eor	r24, r18
 3bc:	82 bb       	out	0x12, r24	; 18
	return ERROR_OK;
 3be:	80 e0       	ldi	r24, 0x00	; 0
			 break;
 3c0:	08 95       	ret
	if(pin>=PinsNeeded || pin>=No_of_pins ) return ERROR_NOK;
 3c2:	81 e0       	ldi	r24, 0x01	; 1
}
 3c4:	08 95       	ret

000003c6 <Timer_Init>:


/*- APIs IMPLEMENTATION -----------------------------------*/
	
uint8_t Timer_Init(StrTimerConfiguration_t* ps_Copy_TIMER_Init_Config)
{
 3c6:	e8 2f       	mov	r30, r24
 3c8:	f9 2f       	mov	r31, r25
	
	if(NullPointer!=ps_Copy_TIMER_Init_Config)
 3ca:	30 97       	sbiw	r30, 0x00	; 0
 3cc:	09 f4       	brne	.+2      	; 0x3d0 <Timer_Init+0xa>
 3ce:	3f c0       	rjmp	.+126    	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	{
		
		/*To Check whether the structure values that have been passed is in the scope of configuration nor not*/
		if(sgau8_TIMERChannel[ps_Copy_TIMER_Init_Config->Timer_Channel]==Enable)           return ERROR_NOK;	
 3d0:	90 81       	ld	r25, Z
 3d2:	29 2f       	mov	r18, r25
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	d9 01       	movw	r26, r18
 3d8:	a8 59       	subi	r26, 0x98	; 152
 3da:	bf 4f       	sbci	r27, 0xFF	; 255
 3dc:	8c 91       	ld	r24, X
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	f1 f0       	breq	.+60     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		if(ps_Copy_TIMER_Init_Config->Timer_Channel >TIMER2  )                              return ERROR_NOK;	
 3e2:	93 30       	cpi	r25, 0x03	; 3
 3e4:	b0 f5       	brcc	.+108    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		if(ps_Copy_TIMER_Init_Config->Timer_Mode>TIMER_MODE_MILIE )                         return ERROR_NOK;
 3e6:	82 81       	ldd	r24, Z+2	; 0x02
 3e8:	83 30       	cpi	r24, 0x03	; 3
 3ea:	a8 f5       	brcc	.+106    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		if(ps_Copy_TIMER_Init_Config->Interrupt_Mode>INTERRUPT)                             return ERROR_NOK;
 3ec:	43 81       	ldd	r20, Z+3	; 0x03
 3ee:	42 30       	cpi	r20, 0x02	; 2
 3f0:	a0 f5       	brcc	.+104    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
		if(ps_Copy_TIMER_Init_Config->Timer_Psc >  Max_Prescaler_possiblities   )           return ERROR_NOK;
 3f2:	51 81       	ldd	r21, Z+1	; 0x01
 3f4:	58 30       	cpi	r21, 0x08	; 8
 3f6:	98 f5       	brcc	.+102    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	
		/*Adjust the configurations*/
		
		sgau8_TIMERChannel[ps_Copy_TIMER_Init_Config->Timer_Channel]=Enable;		
 3f8:	d9 01       	movw	r26, r18
 3fa:	a8 59       	subi	r26, 0x98	; 152
 3fc:	bf 4f       	sbci	r27, 0xFF	; 255
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	6c 93       	st	X, r22
		sgau8_TIMERMode[ps_Copy_TIMER_Init_Config->Timer_Channel]=ps_Copy_TIMER_Init_Config->Timer_Mode;
 402:	d9 01       	movw	r26, r18
 404:	a5 59       	subi	r26, 0x95	; 149
 406:	bf 4f       	sbci	r27, 0xFF	; 255
 408:	8c 93       	st	X, r24
		sgau8_Interrupt_Mode[ps_Copy_TIMER_Init_Config->Timer_Channel]=ps_Copy_TIMER_Init_Config->Interrupt_Mode;
 40a:	22 59       	subi	r18, 0x92	; 146
 40c:	3f 4f       	sbci	r19, 0xFF	; 255
 40e:	d9 01       	movw	r26, r18
 410:	4c 93       	st	X, r20
		sgau8_TIMERPrescaler[ps_Copy_TIMER_Init_Config->Timer_Channel]=ps_Copy_TIMER_Init_Config->Timer_Psc;
		
    
		
		/*In the mode of counter mode the prescaler is entered by the user */
		if((ps_Copy_TIMER_Init_Config->Timer_Mode)==COUNTER_MODE)
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	29 f0       	breq	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
			 * the delay is in micro or milie
			 *************************************************************************/
		}

		/*Check IF mode of Interrupt is enabled*/
		if(ps_Copy_TIMER_Init_Config->Interrupt_Mode==INTERRUPT)
 416:	83 81       	ldd	r24, Z+3	; 0x03
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	a1 f0       	breq	.+40     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	}
	else
	{
		
	}
	return ERROR_OK;
 41c:	80 e0       	ldi	r24, 0x00	; 0
}
 41e:	08 95       	ret
			switch(ps_Copy_TIMER_Init_Config->Timer_Channel)
 420:	91 30       	cpi	r25, 0x01	; 1
 422:	41 f0       	breq	.+16     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 424:	92 30       	cpi	r25, 0x02	; 2
 426:	51 f0       	breq	.+20     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 428:	91 11       	cpse	r25, r1
 42a:	f9 cf       	rjmp	.-14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
					TIMER0_CNTRL_REG  |=ps_Copy_TIMER_Init_Config->Timer_Psc;
 42c:	83 b7       	in	r24, 0x33	; 51
 42e:	58 2b       	or	r21, r24
 430:	53 bf       	out	0x33, r21	; 51
				break;
 432:	f1 cf       	rjmp	.-30     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
					TIMER1_CNTRL_REG_B|=ps_Copy_TIMER_Init_Config->Timer_Psc;
 434:	8e b5       	in	r24, 0x2e	; 46
 436:	58 2b       	or	r21, r24
 438:	5e bd       	out	0x2e, r21	; 46
				break;
 43a:	ed cf       	rjmp	.-38     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				     TIMER2_CNTRL_REG|=ps_Copy_TIMER_Init_Config->Timer_Psc;
 43c:	85 b5       	in	r24, 0x25	; 37
 43e:	58 2b       	or	r21, r24
 440:	55 bd       	out	0x25, r21	; 37
				break;
 442:	e9 cf       	rjmp	.-46     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				  EnableGeneralInterrupt();
 444:	8f b7       	in	r24, 0x3f	; 63
 446:	80 68       	ori	r24, 0x80	; 128
 448:	8f bf       	out	0x3f, r24	; 63
	return ERROR_OK;
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	08 95       	ret
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	08 95       	ret
		if(ps_Copy_TIMER_Init_Config->Timer_Channel >TIMER2  )                              return ERROR_NOK;	
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	08 95       	ret
		if(ps_Copy_TIMER_Init_Config->Timer_Mode>TIMER_MODE_MILIE )                         return ERROR_NOK;
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	08 95       	ret
		if(ps_Copy_TIMER_Init_Config->Interrupt_Mode>INTERRUPT)                             return ERROR_NOK;
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	08 95       	ret
		if(ps_Copy_TIMER_Init_Config->Timer_Psc >  Max_Prescaler_possiblities   )           return ERROR_NOK;
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	08 95       	ret

00000462 <Timer_Start>:

uint8_t Timer_Start(uint8_t u8_Copy_TIMER_Start_TIMERChannel,uint32_t u32_Copy_TIMER_Start_tickCounts,PntrToFunc_t PntrToFunc_Copy_TIMER_Start_ISR)//with sgau8_Prescaler
{
 462:	98 2f       	mov	r25, r24
 464:	26 2f       	mov	r18, r22
 466:	37 2f       	mov	r19, r23
 468:	64 2f       	mov	r22, r20
 46a:	75 2f       	mov	r23, r21
	
	uint16_t u16_Count_TIMER_Start=0;
	
	switch(u8_Copy_TIMER_Start_TIMERChannel)
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	09 f4       	brne	.+2      	; 0x472 <Timer_Start+0x10>
 470:	96 c0       	rjmp	.+300    	; 0x59e <Timer_Start+0x13c>
 472:	82 30       	cpi	r24, 0x02	; 2
 474:	09 f4       	brne	.+2      	; 0x478 <Timer_Start+0x16>
 476:	0b c1       	rjmp	.+534    	; 0x68e <Timer_Start+0x22c>
 478:	88 23       	and	r24, r24
 47a:	11 f0       	breq	.+4      	; 0x480 <Timer_Start+0x1e>
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	08 95       	ret
	{
		case TIMER0:
		{
			/*Check whether it is counter or timer*/
			if(sgau8_TIMERMode[TIMER0]!=COUNTER_MODE)
 480:	40 91 6b 00 	lds	r20, 0x006B	; 0x80006b <sgau8_TIMERMode>
 484:	41 30       	cpi	r20, 0x01	; 1
 486:	09 f4       	brne	.+2      	; 0x48a <Timer_Start+0x28>
 488:	6b c0       	rjmp	.+214    	; 0x560 <Timer_Start+0xfe>
			{
				/* Check whether it is time delay in mili or in micro */
				if(sgau8_TIMERMode[TIMER0]==TIMER_MODE_MICRO)
 48a:	41 11       	cpse	r20, r1
 48c:	33 c0       	rjmp	.+102    	; 0x4f4 <Timer_Start+0x92>
				{ 
						/************************************************************
						 * The prescale divide by 8 and  make count =1 and  the 
						 * counter =255-1 to get overflow every micro
						 ************************************************************/
						TIMER0_CNTRL_REG|=F_CPU_CLOCK_8_TIMER_0;	
 48e:	83 b7       	in	r24, 0x33	; 51
 490:	82 60       	ori	r24, 0x02	; 2
 492:	83 bf       	out	0x33, r24	; 51
						/*Check whether it is polled or not*/
						if(sgau8_Interrupt_Mode[TIMER0]==POLLING)
 494:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sgau8_Interrupt_Mode>
 498:	81 11       	cpse	r24, r1
 49a:	14 c0       	rjmp	.+40     	; 0x4c4 <Timer_Start+0x62>
						{                            
							/*Loop  until it get the time of delay in micro*/
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 49c:	21 15       	cp	r18, r1
 49e:	31 05       	cpc	r19, r1
 4a0:	09 f4       	brne	.+2      	; 0x4a4 <Timer_Start+0x42>
 4a2:	59 c1       	rjmp	.+690    	; 0x756 <Timer_Start+0x2f4>
	uint16_t u16_Count_TIMER_Start=0;
 4a4:	50 e0       	ldi	r21, 0x00	; 0
 4a6:	40 e0       	ldi	r20, 0x00	; 0
								/************************************************************
								 * The prescale divide by 64 and  make count =1 and  the 
								 * counter =255-1 to get overflow every micro
								 ************************************************************/
								SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_OVF_COUNT_FLAG_BIT);								 
								TIMER0_COUNTER_REG=(TIMER0_OVF_COUNT-1U);
 4a8:	6e ef       	ldi	r22, 0xFE	; 254
								SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_OVF_COUNT_FLAG_BIT);								 
 4aa:	98 b7       	in	r25, 0x38	; 56
 4ac:	91 60       	ori	r25, 0x01	; 1
 4ae:	98 bf       	out	0x38, r25	; 56
								TIMER0_COUNTER_REG=(TIMER0_OVF_COUNT-1U);
 4b0:	62 bf       	out	0x32, r22	; 50
								/*Loop  until overflow happens*/
								while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER0_OVF_COUNT_FLAG_BIT) );
 4b2:	08 b6       	in	r0, 0x38	; 56
 4b4:	00 fe       	sbrs	r0, 0
 4b6:	fd cf       	rjmp	.-6      	; 0x4b2 <Timer_Start+0x50>
								u16_Count_TIMER_Start++;
 4b8:	4f 5f       	subi	r20, 0xFF	; 255
 4ba:	5f 4f       	sbci	r21, 0xFF	; 255
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 4bc:	24 17       	cp	r18, r20
 4be:	35 07       	cpc	r19, r21
 4c0:	a1 f7       	brne	.-24     	; 0x4aa <Timer_Start+0x48>
 4c2:	08 95       	ret
							}
							
						}
			
						else if(sgau8_Interrupt_Mode[TIMER0]==INTERRUPT)
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	11 f0       	breq	.+4      	; 0x4cc <Timer_Start+0x6a>
		{
			return ERROR_NOK;
		}
		break;			
	}
	return ERROR_OK;
 4c8:	84 2f       	mov	r24, r20
 4ca:	08 95       	ret
						     SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_OVF_COUNT_FLAG_BIT);								 
 4cc:	88 b7       	in	r24, 0x38	; 56
 4ce:	81 60       	ori	r24, 0x01	; 1
 4d0:	88 bf       	out	0x38, r24	; 56
							 TIMER0_COUNTER_REG=(TIMER0_OVF_COUNT-1U);
 4d2:	8e ef       	ldi	r24, 0xFE	; 254
 4d4:	82 bf       	out	0x32, r24	; 50
							 sgu16_TIMER_COUNTER_REG_BUFFER=TIMER0_COUNTER_REG;
 4d6:	82 b7       	in	r24, 0x32	; 50
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <sgu16_TIMER_COUNTER_REG_BUFFER+0x1>
 4de:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <sgu16_TIMER_COUNTER_REG_BUFFER>
				             Timer_0_OVF_INT_EN();			  
 4e2:	89 b7       	in	r24, 0x39	; 57
 4e4:	81 60       	ori	r24, 0x01	; 1
 4e6:	89 bf       	out	0x39, r24	; 57
							 sgPntrToFunc_TIMER_OVF=PntrToFunc_Copy_TIMER_Start_ISR;													
 4e8:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <sgPntrToFunc_TIMER_OVF+0x1>
 4ec:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <sgPntrToFunc_TIMER_OVF>
	return ERROR_OK;
 4f0:	84 2f       	mov	r24, r20
 4f2:	08 95       	ret
				else if(sgau8_TIMERMode[TIMER0]==TIMER_MODE_MILIE)
 4f4:	42 30       	cpi	r20, 0x02	; 2
 4f6:	09 f0       	breq	.+2      	; 0x4fa <Timer_Start+0x98>
 4f8:	08 95       	ret
						TIMER0_CNTRL_REG|=F_CPU_CLOCK_64_TIMER_0;	
 4fa:	83 b7       	in	r24, 0x33	; 51
 4fc:	83 60       	ori	r24, 0x03	; 3
 4fe:	83 bf       	out	0x33, r24	; 51
						if(sgau8_Interrupt_Mode[TIMER0]==POLLING)
 500:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sgau8_Interrupt_Mode>
 504:	81 11       	cpse	r24, r1
 506:	14 c0       	rjmp	.+40     	; 0x530 <Timer_Start+0xce>
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 508:	21 15       	cp	r18, r1
 50a:	31 05       	cpc	r19, r1
 50c:	09 f4       	brne	.+2      	; 0x510 <Timer_Start+0xae>
 50e:	23 c1       	rjmp	.+582    	; 0x756 <Timer_Start+0x2f4>
	uint16_t u16_Count_TIMER_Start=0;
 510:	50 e0       	ldi	r21, 0x00	; 0
 512:	40 e0       	ldi	r20, 0x00	; 0
								TIMER0_COUNTER_REG=(TIMER0_OVF_COUNT-125U);
 514:	62 e8       	ldi	r22, 0x82	; 130
								SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_OVF_COUNT_FLAG_BIT);								 
 516:	98 b7       	in	r25, 0x38	; 56
 518:	91 60       	ori	r25, 0x01	; 1
 51a:	98 bf       	out	0x38, r25	; 56
								TIMER0_COUNTER_REG=(TIMER0_OVF_COUNT-125U);
 51c:	62 bf       	out	0x32, r22	; 50
								while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER0_OVF_COUNT_FLAG_BIT) );
 51e:	08 b6       	in	r0, 0x38	; 56
 520:	00 fe       	sbrs	r0, 0
 522:	fd cf       	rjmp	.-6      	; 0x51e <Timer_Start+0xbc>
								u16_Count_TIMER_Start++;
 524:	4f 5f       	subi	r20, 0xFF	; 255
 526:	5f 4f       	sbci	r21, 0xFF	; 255
							while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 528:	24 17       	cp	r18, r20
 52a:	35 07       	cpc	r19, r21
 52c:	a1 f7       	brne	.-24     	; 0x516 <Timer_Start+0xb4>
 52e:	08 95       	ret
						else if(sgau8_Interrupt_Mode[TIMER0]==INTERRUPT)
 530:	81 30       	cpi	r24, 0x01	; 1
 532:	11 f0       	breq	.+4      	; 0x538 <Timer_Start+0xd6>
	return ERROR_OK;
 534:	89 2f       	mov	r24, r25
 536:	08 95       	ret
						     SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_OVF_COUNT_FLAG_BIT);								 
 538:	88 b7       	in	r24, 0x38	; 56
 53a:	81 60       	ori	r24, 0x01	; 1
 53c:	88 bf       	out	0x38, r24	; 56
							 TIMER0_COUNTER_REG=(TIMER0_OVF_COUNT-125U);
 53e:	82 e8       	ldi	r24, 0x82	; 130
 540:	82 bf       	out	0x32, r24	; 50
							 sgu16_TIMER_COUNTER_REG_BUFFER=TIMER0_COUNTER_REG;
 542:	22 b7       	in	r18, 0x32	; 50
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <sgu16_TIMER_COUNTER_REG_BUFFER+0x1>
 54a:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <sgu16_TIMER_COUNTER_REG_BUFFER>
				             Timer_0_OVF_INT_EN();			  
 54e:	89 b7       	in	r24, 0x39	; 57
 550:	81 60       	ori	r24, 0x01	; 1
 552:	89 bf       	out	0x39, r24	; 57
							 sgPntrToFunc_TIMER_OVF=PntrToFunc_Copy_TIMER_Start_ISR;												
 554:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <sgPntrToFunc_TIMER_OVF+0x1>
 558:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <sgPntrToFunc_TIMER_OVF>
	return ERROR_OK;
 55c:	89 2f       	mov	r24, r25
 55e:	08 95       	ret
				if(sgau8_Interrupt_Mode[TIMER0]==POLLING)
 560:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <sgau8_Interrupt_Mode>
 564:	81 11       	cpse	r24, r1
 566:	09 c0       	rjmp	.+18     	; 0x57a <Timer_Start+0x118>
                    SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_OVF_COUNT_FLAG_BIT);
 568:	98 b7       	in	r25, 0x38	; 56
 56a:	91 60       	ori	r25, 0x01	; 1
 56c:	98 bf       	out	0x38, r25	; 56
				    TIMER0_COUNTER_REG=TIMER0_OVF_COUNT-u32_Copy_TIMER_Start_tickCounts;
 56e:	20 95       	com	r18
 570:	22 bf       	out	0x32, r18	; 50
					while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER0_OVF_COUNT_FLAG_BIT) );
 572:	08 b6       	in	r0, 0x38	; 56
 574:	00 fe       	sbrs	r0, 0
 576:	fd cf       	rjmp	.-6      	; 0x572 <Timer_Start+0x110>
 578:	08 95       	ret
				else if(sgau8_Interrupt_Mode[TIMER0]==INTERRUPT)
 57a:	81 30       	cpi	r24, 0x01	; 1
 57c:	11 f0       	breq	.+4      	; 0x582 <Timer_Start+0x120>
	return ERROR_OK;
 57e:	89 2f       	mov	r24, r25
 580:	08 95       	ret
					 SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER0_OVF_COUNT_FLAG_BIT);								 
 582:	88 b7       	in	r24, 0x38	; 56
 584:	81 60       	ori	r24, 0x01	; 1
 586:	88 bf       	out	0x38, r24	; 56
					 TIMER0_COUNTER_REG=(TIMER0_OVF_COUNT-1U);
 588:	8e ef       	ldi	r24, 0xFE	; 254
 58a:	82 bf       	out	0x32, r24	; 50
					 Timer_0_OVF_INT_EN();			  
 58c:	89 b7       	in	r24, 0x39	; 57
 58e:	81 60       	ori	r24, 0x01	; 1
 590:	89 bf       	out	0x39, r24	; 57
					sgPntrToFunc_TIMER_OVF=PntrToFunc_Copy_TIMER_Start_ISR;						
 592:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <sgPntrToFunc_TIMER_OVF+0x1>
 596:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <sgPntrToFunc_TIMER_OVF>
	return ERROR_OK;
 59a:	89 2f       	mov	r24, r25
 59c:	08 95       	ret
			if(sgau8_TIMERMode[TIMER1]!=COUNTER_MODE)
 59e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <sgau8_TIMERMode+0x1>
 5a2:	91 30       	cpi	r25, 0x01	; 1
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <Timer_Start+0x146>
 5a6:	54 c0       	rjmp	.+168    	; 0x650 <Timer_Start+0x1ee>
				if(sgau8_TIMERMode[TIMER1]==TIMER_MODE_MICRO)
 5a8:	91 11       	cpse	r25, r1
 5aa:	27 c0       	rjmp	.+78     	; 0x5fa <Timer_Start+0x198>
					TIMER1_CNTRL_REG_B|=F_CPU_CLOCK_8_TIMER_1;
 5ac:	8e b5       	in	r24, 0x2e	; 46
 5ae:	82 60       	ori	r24, 0x02	; 2
 5b0:	8e bd       	out	0x2e, r24	; 46
					if(sgau8_Interrupt_Mode[TIMER1]==POLLING)
 5b2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sgau8_Interrupt_Mode+0x1>
 5b6:	81 11       	cpse	r24, r1
 5b8:	16 c0       	rjmp	.+44     	; 0x5e6 <Timer_Start+0x184>
						while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 5ba:	21 15       	cp	r18, r1
 5bc:	31 05       	cpc	r19, r1
 5be:	09 f4       	brne	.+2      	; 0x5c2 <Timer_Start+0x160>
 5c0:	ca c0       	rjmp	.+404    	; 0x756 <Timer_Start+0x2f4>
	uint16_t u16_Count_TIMER_Start=0;
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	40 e0       	ldi	r20, 0x00	; 0
							TIMER1_COUNTER_REG=(TIMER1_OVF_COUNT-1U);
 5c6:	6f ef       	ldi	r22, 0xFF	; 255
 5c8:	7f ef       	ldi	r23, 0xFF	; 255
							SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER1_OVF_COUNT_FLAG_BIT);
 5ca:	98 b7       	in	r25, 0x38	; 56
 5cc:	94 60       	ori	r25, 0x04	; 4
 5ce:	98 bf       	out	0x38, r25	; 56
							TIMER1_COUNTER_REG=(TIMER1_OVF_COUNT-1U);
 5d0:	7d bd       	out	0x2d, r23	; 45
 5d2:	6c bd       	out	0x2c, r22	; 44
							while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER1_OVF_COUNT_FLAG_BIT) );
 5d4:	08 b6       	in	r0, 0x38	; 56
 5d6:	02 fe       	sbrs	r0, 2
 5d8:	fd cf       	rjmp	.-6      	; 0x5d4 <Timer_Start+0x172>
							u16_Count_TIMER_Start++;
 5da:	4f 5f       	subi	r20, 0xFF	; 255
 5dc:	5f 4f       	sbci	r21, 0xFF	; 255
						while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 5de:	24 17       	cp	r18, r20
 5e0:	35 07       	cpc	r19, r21
 5e2:	99 f7       	brne	.-26     	; 0x5ca <Timer_Start+0x168>
 5e4:	08 95       	ret
					else if(sgau8_Interrupt_Mode[TIMER1]==INTERRUPT)
 5e6:	81 30       	cpi	r24, 0x01	; 1
 5e8:	11 f0       	breq	.+4      	; 0x5ee <Timer_Start+0x18c>
	return ERROR_OK;
 5ea:	89 2f       	mov	r24, r25
 5ec:	08 95       	ret
						 sgPntrToFunc_TIMER_OVF=PntrToFunc_Copy_TIMER_Start_ISR;													
 5ee:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <sgPntrToFunc_TIMER_OVF+0x1>
 5f2:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <sgPntrToFunc_TIMER_OVF>
	return ERROR_OK;
 5f6:	89 2f       	mov	r24, r25
 5f8:	08 95       	ret
				else if(sgau8_TIMERMode[TIMER1]==TIMER_MODE_MILIE)
 5fa:	92 30       	cpi	r25, 0x02	; 2
 5fc:	11 f0       	breq	.+4      	; 0x602 <Timer_Start+0x1a0>
	return ERROR_OK;
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	08 95       	ret
					TIMER1_CNTRL_REG_B|=F_CPU_CLOCK_64_TIMER_1;
 602:	8e b5       	in	r24, 0x2e	; 46
 604:	83 60       	ori	r24, 0x03	; 3
 606:	8e bd       	out	0x2e, r24	; 46
					if(sgau8_Interrupt_Mode[TIMER1]==POLLING)
 608:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sgau8_Interrupt_Mode+0x1>
 60c:	81 11       	cpse	r24, r1
 60e:	16 c0       	rjmp	.+44     	; 0x63c <Timer_Start+0x1da>
						while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 610:	21 15       	cp	r18, r1
 612:	31 05       	cpc	r19, r1
 614:	09 f4       	brne	.+2      	; 0x618 <Timer_Start+0x1b6>
 616:	9f c0       	rjmp	.+318    	; 0x756 <Timer_Start+0x2f4>
	uint16_t u16_Count_TIMER_Start=0;
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	40 e0       	ldi	r20, 0x00	; 0
							TIMER1_COUNTER_REG=(TIMER1_OVF_COUNT-125U);
 61c:	63 e8       	ldi	r22, 0x83	; 131
 61e:	7f ef       	ldi	r23, 0xFF	; 255
							SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER1_OVF_COUNT_FLAG_BIT);							 
 620:	98 b7       	in	r25, 0x38	; 56
 622:	94 60       	ori	r25, 0x04	; 4
 624:	98 bf       	out	0x38, r25	; 56
							TIMER1_COUNTER_REG=(TIMER1_OVF_COUNT-125U);
 626:	7d bd       	out	0x2d, r23	; 45
 628:	6c bd       	out	0x2c, r22	; 44
							while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER1_OVF_COUNT_FLAG_BIT) );
 62a:	08 b6       	in	r0, 0x38	; 56
 62c:	02 fe       	sbrs	r0, 2
 62e:	fd cf       	rjmp	.-6      	; 0x62a <Timer_Start+0x1c8>
							u16_Count_TIMER_Start++;
 630:	4f 5f       	subi	r20, 0xFF	; 255
 632:	5f 4f       	sbci	r21, 0xFF	; 255
						while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 634:	24 17       	cp	r18, r20
 636:	35 07       	cpc	r19, r21
 638:	99 f7       	brne	.-26     	; 0x620 <Timer_Start+0x1be>
 63a:	08 95       	ret
					else if(sgau8_Interrupt_Mode[TIMER1]==INTERRUPT)
 63c:	81 30       	cpi	r24, 0x01	; 1
 63e:	11 f0       	breq	.+4      	; 0x644 <Timer_Start+0x1e2>
	return ERROR_OK;
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	08 95       	ret
						 sgPntrToFunc_TIMER_OVF=PntrToFunc_Copy_TIMER_Start_ISR;													
 644:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <sgPntrToFunc_TIMER_OVF+0x1>
 648:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <sgPntrToFunc_TIMER_OVF>
	return ERROR_OK;
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	08 95       	ret
				if(sgau8_Interrupt_Mode[TIMER1]==POLLING)
 650:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sgau8_Interrupt_Mode+0x1>
 654:	81 11       	cpse	r24, r1
 656:	0c c0       	rjmp	.+24     	; 0x670 <Timer_Start+0x20e>
                    SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER1_OVF_COUNT_FLAG_BIT);
 658:	98 b7       	in	r25, 0x38	; 56
 65a:	94 60       	ori	r25, 0x04	; 4
 65c:	98 bf       	out	0x38, r25	; 56
				    TIMER1_COUNTER_REG=TIMER1_OVF_COUNT-u32_Copy_TIMER_Start_tickCounts;
 65e:	31 95       	neg	r19
 660:	21 95       	neg	r18
 662:	31 09       	sbc	r19, r1
 664:	3d bd       	out	0x2d, r19	; 45
 666:	2c bd       	out	0x2c, r18	; 44
					while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER1_OVF_COUNT_FLAG_BIT) );
 668:	08 b6       	in	r0, 0x38	; 56
 66a:	02 fe       	sbrs	r0, 2
 66c:	fd cf       	rjmp	.-6      	; 0x668 <Timer_Start+0x206>
 66e:	08 95       	ret
				else if(sgau8_Interrupt_Mode[TIMER1]==INTERRUPT)
 670:	81 30       	cpi	r24, 0x01	; 1
 672:	11 f0       	breq	.+4      	; 0x678 <Timer_Start+0x216>
	return ERROR_OK;
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	08 95       	ret
				    TIMER1_COUNTER_REG=TIMER1_OVF_COUNT-u32_Copy_TIMER_Start_tickCounts;
 678:	31 95       	neg	r19
 67a:	21 95       	neg	r18
 67c:	31 09       	sbc	r19, r1
 67e:	3d bd       	out	0x2d, r19	; 45
 680:	2c bd       	out	0x2c, r18	; 44
					sgPntrToFunc_TIMER_OVF=PntrToFunc_Copy_TIMER_Start_ISR;						
 682:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <sgPntrToFunc_TIMER_OVF+0x1>
 686:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <sgPntrToFunc_TIMER_OVF>
	return ERROR_OK;
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	08 95       	ret
			if(sgau8_TIMERMode[TIMER2]!=COUNTER_MODE)
 68e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <sgau8_TIMERMode+0x2>
 692:	91 30       	cpi	r25, 0x01	; 1
 694:	09 f4       	brne	.+2      	; 0x698 <Timer_Start+0x236>
 696:	4f c0       	rjmp	.+158    	; 0x736 <Timer_Start+0x2d4>
				if(sgau8_TIMERMode[TIMER2]==TIMER_MODE_MICRO)
 698:	91 11       	cpse	r25, r1
 69a:	25 c0       	rjmp	.+74     	; 0x6e6 <Timer_Start+0x284>
					TIMER2_CNTRL_REG|=F_CPU_CLOCK_8_TIMER_2;
 69c:	85 b5       	in	r24, 0x25	; 37
 69e:	82 60       	ori	r24, 0x02	; 2
 6a0:	85 bd       	out	0x25, r24	; 37
					if(sgau8_Interrupt_Mode[TIMER2]==POLLING)
 6a2:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <sgau8_Interrupt_Mode+0x2>
 6a6:	81 11       	cpse	r24, r1
 6a8:	14 c0       	rjmp	.+40     	; 0x6d2 <Timer_Start+0x270>
						while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 6aa:	21 15       	cp	r18, r1
 6ac:	31 05       	cpc	r19, r1
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <Timer_Start+0x250>
 6b0:	52 c0       	rjmp	.+164    	; 0x756 <Timer_Start+0x2f4>
	uint16_t u16_Count_TIMER_Start=0;
 6b2:	50 e0       	ldi	r21, 0x00	; 0
 6b4:	40 e0       	ldi	r20, 0x00	; 0
							TIMER2_COUNTER_REG=(uint8_t)(TIMER2_OVF_COUNT-1U);
 6b6:	6e ef       	ldi	r22, 0xFE	; 254
 6b8:	64 bd       	out	0x24, r22	; 36
							while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER2_OVF_COUNT_FLAG_BIT) );
 6ba:	08 b6       	in	r0, 0x38	; 56
 6bc:	06 fe       	sbrs	r0, 6
 6be:	fd cf       	rjmp	.-6      	; 0x6ba <Timer_Start+0x258>
							SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER2_OVF_COUNT_FLAG_BIT);
 6c0:	98 b7       	in	r25, 0x38	; 56
 6c2:	90 64       	ori	r25, 0x40	; 64
 6c4:	98 bf       	out	0x38, r25	; 56
							u16_Count_TIMER_Start++;
 6c6:	4f 5f       	subi	r20, 0xFF	; 255
 6c8:	5f 4f       	sbci	r21, 0xFF	; 255
						while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 6ca:	24 17       	cp	r18, r20
 6cc:	35 07       	cpc	r19, r21
 6ce:	a1 f7       	brne	.-24     	; 0x6b8 <Timer_Start+0x256>
 6d0:	08 95       	ret
					else if(sgau8_Interrupt_Mode[TIMER2]==INTERRUPT)
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	11 f0       	breq	.+4      	; 0x6da <Timer_Start+0x278>
	return ERROR_OK;
 6d6:	89 2f       	mov	r24, r25
 6d8:	08 95       	ret
						 sgPntrToFunc_TIMER_OVF=PntrToFunc_Copy_TIMER_Start_ISR;													
 6da:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <sgPntrToFunc_TIMER_OVF+0x1>
 6de:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <sgPntrToFunc_TIMER_OVF>
	return ERROR_OK;
 6e2:	89 2f       	mov	r24, r25
 6e4:	08 95       	ret
				else if(sgau8_TIMERMode[TIMER2]==TIMER_MODE_MILIE)
 6e6:	92 30       	cpi	r25, 0x02	; 2
 6e8:	11 f0       	breq	.+4      	; 0x6ee <Timer_Start+0x28c>
	return ERROR_OK;
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	08 95       	ret
					TIMER2_CNTRL_REG|=F_CPU_CLOCK_64_TIMER_2;
 6ee:	85 b5       	in	r24, 0x25	; 37
 6f0:	84 60       	ori	r24, 0x04	; 4
 6f2:	85 bd       	out	0x25, r24	; 37
					if(sgau8_Interrupt_Mode[TIMER2]==POLLING)
 6f4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <sgau8_Interrupt_Mode+0x2>
 6f8:	81 11       	cpse	r24, r1
 6fa:	13 c0       	rjmp	.+38     	; 0x722 <Timer_Start+0x2c0>
						while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 6fc:	21 15       	cp	r18, r1
 6fe:	31 05       	cpc	r19, r1
 700:	51 f1       	breq	.+84     	; 0x756 <Timer_Start+0x2f4>
	uint16_t u16_Count_TIMER_Start=0;
 702:	50 e0       	ldi	r21, 0x00	; 0
 704:	40 e0       	ldi	r20, 0x00	; 0
							TIMER2_COUNTER_REG=(uint8_t)(TIMER2_OVF_COUNT-125U);
 706:	62 e8       	ldi	r22, 0x82	; 130
 708:	64 bd       	out	0x24, r22	; 36
							while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER2_OVF_COUNT_FLAG_BIT) );
 70a:	08 b6       	in	r0, 0x38	; 56
 70c:	06 fe       	sbrs	r0, 6
 70e:	fd cf       	rjmp	.-6      	; 0x70a <Timer_Start+0x2a8>
							SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER2_OVF_COUNT_FLAG_BIT);
 710:	98 b7       	in	r25, 0x38	; 56
 712:	90 64       	ori	r25, 0x40	; 64
 714:	98 bf       	out	0x38, r25	; 56
							u16_Count_TIMER_Start++;
 716:	4f 5f       	subi	r20, 0xFF	; 255
 718:	5f 4f       	sbci	r21, 0xFF	; 255
						while(u32_Copy_TIMER_Start_tickCounts!=u16_Count_TIMER_Start)
 71a:	24 17       	cp	r18, r20
 71c:	35 07       	cpc	r19, r21
 71e:	a1 f7       	brne	.-24     	; 0x708 <Timer_Start+0x2a6>
 720:	08 95       	ret
					else if(sgau8_Interrupt_Mode[TIMER2]==INTERRUPT)
 722:	81 30       	cpi	r24, 0x01	; 1
 724:	11 f0       	breq	.+4      	; 0x72a <Timer_Start+0x2c8>
	return ERROR_OK;
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	08 95       	ret
						 sgPntrToFunc_TIMER_OVF=PntrToFunc_Copy_TIMER_Start_ISR;													
 72a:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <sgPntrToFunc_TIMER_OVF+0x1>
 72e:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <sgPntrToFunc_TIMER_OVF>
	return ERROR_OK;
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	08 95       	ret
				if(sgau8_Interrupt_Mode[TIMER2]==POLLING)
 736:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <sgau8_Interrupt_Mode+0x2>
 73a:	81 11       	cpse	r24, r1
 73c:	09 c0       	rjmp	.+18     	; 0x750 <Timer_Start+0x2ee>
                    SET_BIT(TIMER_EVENT_FLAGS_REG,TIMER2_OVF_COUNT_FLAG_BIT);
 73e:	98 b7       	in	r25, 0x38	; 56
 740:	90 64       	ori	r25, 0x40	; 64
 742:	98 bf       	out	0x38, r25	; 56
				    TIMER2_COUNTER_REG=TIMER2_OVF_COUNT-u32_Copy_TIMER_Start_tickCounts;
 744:	20 95       	com	r18
 746:	24 bd       	out	0x24, r18	; 36
					while( BIT_IS_CLR(TIMER_EVENT_FLAGS_REG,TIMER2_OVF_COUNT_FLAG_BIT) );					
 748:	08 b6       	in	r0, 0x38	; 56
 74a:	06 fe       	sbrs	r0, 6
 74c:	fd cf       	rjmp	.-6      	; 0x748 <Timer_Start+0x2e6>
 74e:	08 95       	ret
				else if(sgau8_Interrupt_Mode[TIMER2]==INTERRUPT)
 750:	81 30       	cpi	r24, 0x01	; 1
 752:	11 f0       	breq	.+4      	; 0x758 <Timer_Start+0x2f6>
	return ERROR_OK;
 754:	80 e0       	ldi	r24, 0x00	; 0
}
 756:	08 95       	ret
					sgPntrToFunc_TIMER_OVF=PntrToFunc_Copy_TIMER_Start_ISR;						
 758:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <sgPntrToFunc_TIMER_OVF+0x1>
 75c:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <sgPntrToFunc_TIMER_OVF>
	return ERROR_OK;
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	08 95       	ret

00000764 <__vector_11>:
	
	return ERROR_OK;
}

Timer_ISR(TIMER0_OVF_vect_num)
{
 764:	1f 92       	push	r1
 766:	0f 92       	push	r0
 768:	0f b6       	in	r0, 0x3f	; 63
 76a:	0f 92       	push	r0
 76c:	11 24       	eor	r1, r1
 76e:	2f 93       	push	r18
 770:	3f 93       	push	r19
 772:	4f 93       	push	r20
 774:	5f 93       	push	r21
 776:	6f 93       	push	r22
 778:	7f 93       	push	r23
 77a:	8f 93       	push	r24
 77c:	9f 93       	push	r25
 77e:	af 93       	push	r26
 780:	bf 93       	push	r27
 782:	ef 93       	push	r30
 784:	ff 93       	push	r31

	/*count++;*/
	TIMER0_COUNTER_REG=sgu16_TIMER_COUNTER_REG_BUFFER;
 786:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <sgu16_TIMER_COUNTER_REG_BUFFER>
 78a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <sgu16_TIMER_COUNTER_REG_BUFFER+0x1>
 78e:	82 bf       	out	0x32, r24	; 50
    sgPntrToFunc_TIMER_OVF();
 790:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <sgPntrToFunc_TIMER_OVF>
 794:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <sgPntrToFunc_TIMER_OVF+0x1>
 798:	09 95       	icall
}
 79a:	ff 91       	pop	r31
 79c:	ef 91       	pop	r30
 79e:	bf 91       	pop	r27
 7a0:	af 91       	pop	r26
 7a2:	9f 91       	pop	r25
 7a4:	8f 91       	pop	r24
 7a6:	7f 91       	pop	r23
 7a8:	6f 91       	pop	r22
 7aa:	5f 91       	pop	r21
 7ac:	4f 91       	pop	r20
 7ae:	3f 91       	pop	r19
 7b0:	2f 91       	pop	r18
 7b2:	0f 90       	pop	r0
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	0f 90       	pop	r0
 7b8:	1f 90       	pop	r1
 7ba:	18 95       	reti

000007bc <__vector_9>:
Timer_ISR(TIMER1_OVF_vect_num)
{
 7bc:	1f 92       	push	r1
 7be:	0f 92       	push	r0
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	0f 92       	push	r0
 7c4:	11 24       	eor	r1, r1
 7c6:	2f 93       	push	r18
 7c8:	3f 93       	push	r19
 7ca:	4f 93       	push	r20
 7cc:	5f 93       	push	r21
 7ce:	6f 93       	push	r22
 7d0:	7f 93       	push	r23
 7d2:	8f 93       	push	r24
 7d4:	9f 93       	push	r25
 7d6:	af 93       	push	r26
 7d8:	bf 93       	push	r27
 7da:	ef 93       	push	r30
 7dc:	ff 93       	push	r31
	sgPntrToFunc_TIMER_OVF();
 7de:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <sgPntrToFunc_TIMER_OVF>
 7e2:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <sgPntrToFunc_TIMER_OVF+0x1>
 7e6:	09 95       	icall
}
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	bf 91       	pop	r27
 7ee:	af 91       	pop	r26
 7f0:	9f 91       	pop	r25
 7f2:	8f 91       	pop	r24
 7f4:	7f 91       	pop	r23
 7f6:	6f 91       	pop	r22
 7f8:	5f 91       	pop	r21
 7fa:	4f 91       	pop	r20
 7fc:	3f 91       	pop	r19
 7fe:	2f 91       	pop	r18
 800:	0f 90       	pop	r0
 802:	0f be       	out	0x3f, r0	; 63
 804:	0f 90       	pop	r0
 806:	1f 90       	pop	r1
 808:	18 95       	reti

0000080a <__vector_5>:

Timer_ISR(TIMER2_OVF_vect_num)
{
 80a:	1f 92       	push	r1
 80c:	0f 92       	push	r0
 80e:	0f b6       	in	r0, 0x3f	; 63
 810:	0f 92       	push	r0
 812:	11 24       	eor	r1, r1
 814:	2f 93       	push	r18
 816:	3f 93       	push	r19
 818:	4f 93       	push	r20
 81a:	5f 93       	push	r21
 81c:	6f 93       	push	r22
 81e:	7f 93       	push	r23
 820:	8f 93       	push	r24
 822:	9f 93       	push	r25
 824:	af 93       	push	r26
 826:	bf 93       	push	r27
 828:	ef 93       	push	r30
 82a:	ff 93       	push	r31
	sgPntrToFunc_TIMER_OVF();
 82c:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <sgPntrToFunc_TIMER_OVF>
 830:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <sgPntrToFunc_TIMER_OVF+0x1>
 834:	09 95       	icall
 836:	ff 91       	pop	r31
 838:	ef 91       	pop	r30
 83a:	bf 91       	pop	r27
 83c:	af 91       	pop	r26
 83e:	9f 91       	pop	r25
 840:	8f 91       	pop	r24
 842:	7f 91       	pop	r23
 844:	6f 91       	pop	r22
 846:	5f 91       	pop	r21
 848:	4f 91       	pop	r20
 84a:	3f 91       	pop	r19
 84c:	2f 91       	pop	r18
 84e:	0f 90       	pop	r0
 850:	0f be       	out	0x3f, r0	; 63
 852:	0f 90       	pop	r0
 854:	1f 90       	pop	r1
 856:	18 95       	reti

00000858 <_exit>:
 858:	f8 94       	cli

0000085a <__stop_program>:
 85a:	ff cf       	rjmp	.-2      	; 0x85a <__stop_program>
